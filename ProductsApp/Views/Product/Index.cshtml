@model Product.DataAccess.ViewModel.ProductVM

<div class="row">
    <h3 class="col-sm-10"> All Products</h3>
    <a href="/Product/_Create" class="btn btn-sm btn-outline-primary openModal" ajaxType="GET">
        Add Product
    </a>
    <br/>
    <div class="col-4">
        <div class="row">
            <input type="text" class="form-control" placeholder="Search..." oninput="refresh();" id="generalSearch"><span><i class="fa fa-search"></i></span>
        </div>
    </div>
</div>
<br />

<div id="productGrid" style="width:100%;" class="ag-theme-balham"></div>

<script>

    var columnDefs = [
        { headerName: "Id", field: "id" },
        {
            headerName: "Name", field: "name"
        },
        {
            headerName: "InsertedDate", field: "insertedDate", cellRenderer: (data) => {
                return data.value ? (new Date(data.value)).toLocaleDateString() : '';
            }
        },
        {
            headerName: "Price", field: "price"
        },
        {
            headerName: "Code", field: "code"
        },
        {
            headerName: "Category Name", field: "prodCat"
        },
        {
            headerName: 'Action', editable: false, suppressSizeToFit: true,
            cellRenderer: function (params) {
                if (params.data) {
                    return `<a href="/Product/_Edit/${params.data.id}" ajaxType="GET" class="btn btn-sm btn-outline-primary openModal">Edit</a>&nbsp;
                        <a href="/Product/Delete/${params.data.id}" ajaxType="GET" confirmButtonText="Yes, Cancel it!" msgHeader="Canceled!"  class="btn btn-sm btn-outline-danger btnDelete confirm">Delete</a>&nbsp;
                       <a href="/Product/_Details/${params.data.id}"  ajaxType="GET"  class="btn btn-sm btn-outline-success openModal">Details</a>`;
                    
                }
            }
        }
    ];


    var gridOptions = {
        columnDefs: columnDefs,
        rowSelection: 'multiple',
        domLayout: 'autoHeight',

        defaultColDef: {
            editable: false,
            enableRowGroup: true,
            enablePivot: true,
            enableValue: true,
            sortable: true,
            resizable: true,
            filter: true,
            flex: 1
        },
        suppressRowClickSelection: true,
        pagination: true,
        getRowHeight: function (params) {
            return 35;
        },
        rowModelType: 'infinite',
        animateRows: true, 
        paginationPageSize: 3,
        cacheOverflowSize: 2,
        maxConcurrentDatasourceRequests: 2,
        infiniteInitialRowCount: 1,
        maxBlocksInCache: 2, 
        cacheBlockSize: 3, 
        enableColResize: true, 
        suppressMenuHide: true,
        onGridReady: function () {
            gridOptions.api.sizeColumnsToFit();
        }, 
    }; 
     var dataSourceTest= '';
    document.addEventListener('DOMContentLoaded', function () {
        var gridDiv = document.querySelector('#productGrid');
        new agGrid.Grid(gridDiv, gridOptions);

        dataSourceTest = {
      //  rowCount: null, // behave as infinite scroll
        getRows: function (params) { 
            var model = {
                PageNo: gridOptions.api.paginationGetCurrentPage(),
                PageSize: gridOptions.paginationPageSize,
                SearchText: document.getElementById('generalSearch').value,

            };
            loadPaginatedGridWithDelay('/Product/IndexAjax/', 'POST', model, gridOptions, params);
              },
            getRowHeight: function (params) {
                return 35;
            },
    }; 
        gridOptions.api.showNoRowsOverlay();
        gridOptions.api.setDatasource(dataSourceTest);
    });
     

    function refresh(e) {
        gridOptions.api.setDatasource(dataSourceTest);
    }
</script>